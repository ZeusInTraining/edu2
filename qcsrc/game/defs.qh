
/*
==============================================================================

			SOURCE FOR GLOBALVARS_T C STRUCTURE

==============================================================================
*/

//
// system globals
//
entity		self;
entity		other;
entity		world;
float		time;
float		frametime;

// force all entities to touch triggers
// next frame.  this is needed because
// non-moving things don't normally scan
// for triggers, and when a trigger is
// created (like a teleport trigger), it
// needs to catch everything.
// decremented each frame, so set to 2
// to guarantee everything is touched
float		force_retouch;
string		mapname;

float		deathmatch;
float		coop;
float		teamplay;

// propagated from level to level, used to
// keep track of completed episodes
float		serverflags;

float		total_secrets;
float		total_monsters;

// number of secrets found
float		found_secrets;
// number of monsters killed

// spawnparms are used to encode information about clients across server
// level changes
float		killed_monsters;
float		parm1, parm2, parm3, parm4, parm5, parm6, parm7, parm8, parm9, parm10, parm11, parm12, parm13, parm14, parm15, parm16;

//
// global variables set by built in functions
//
// set by makevectors()

// set by traceline / tracebox
vector		v_forward, v_up, v_right;
float		trace_allsolid;
float		trace_startsolid;
float		trace_fraction;
vector		trace_endpos;
vector		trace_plane_normal;
float		trace_plane_dist;
entity		trace_ent;
float		trace_inopen;
float		trace_inwater;

// destination of single entity writes

//
// required prog functions
//
entity		msg_entity;

// only for testing
void() 		main;

// called at the start of each frame
void()		StartFrame;

// called every frame, before physics.
void() 		PlayerPreThink;
// called every frame, AFTER physics.
void() 		PlayerPostThink;

// called when a client issues the 'kill' command
void()		ClientKill;
// called when a client connected to the server
void()		ClientConnect;

// call after setting the parm1... parms
// called to spawn the clients player entity
void() 		PutClientInServer;
// called when a client disconnects from the server
void()		ClientDisconnect;

// called when a client first connects to
// a server. sets parms so they can be
// saved off for restarts
void()		SetNewParms;

// call to set parms for self so they can
// be saved for a level transition
void()		SetChangeParms;

// flag for structure dumping
//================================================
void		end_sys_globals;

/*
==============================================================================

			SOURCE FOR ENTVARS_T C STRUCTURE

==============================================================================
*/

//
// system fields (*** = do not set in prog code, maintained by C code)
//

// *** model index in the precached list
.float		modelindex;
// *** origin + mins / maxs
.vector		absmin, absmax;

// local time for entity
.float		ltime;
.float		movetype;
.float		solid;

// ***
.vector		origin;
// ***
.vector		oldorigin;
.vector		velocity;
.vector		angles;
.vector		avelocity;

// temp angle adjust from damage or recoil
.vector		punchangle;

// spawn function
.string		classname;
.string		model;
.float		frame;
.float		skin;
.float		effects;

// bounding box extents reletive to origin
.vector		mins, maxs;
// maxs - mins
.vector		size;

.void()		touch;
.void()		use;
.void()		think;
// for doors or plats, called when can't push other
.void()		blocked;

.float		nextthink;
.entity		groundentity;

// stats
.float		health;
.float		frags;
// one of the IT_SHOTGUN, etc flags
.float		weapon;
.string		weaponmodel;
.float		weaponframe;
.float		currentammo;
.float		ammo_shells, ammo_nails, ammo_rockets, ammo_cells;

// bit flags
.float		items;

.float		takedamage;
.entity		chain;
.float		deadflag;

// add to origin to get eye point
.vector		view_ofs;

// fire
.float		button0;
// use
.float		button1;
// jump
.float		button2;

// weapon changes
.float		impulse;

.float		fixangle;
// view / targeting angle for players
.vector		v_angle;
// calculated pitch angle for lookup up slopes
.float		idealpitch;

.string		netname;

.entity 	enemy;

.float		flags;

.float		colormap;
.float		team;

// players maximum health is stored here
.float		max_health;

// don't back up
.float		teleport_time;

// save this fraction of incoming damage
.float		armortype;
.float		armorvalue;

// 0 = not in, 1 = feet, 2 = wast, 3 = eyes
.float		waterlevel;
// a contents value
.float		watertype;

.float		ideal_yaw;
.float		yaw_speed;

.entity		aiment;

// a movetarget or an enemy
.entity 	goalentity;

.float		spawnflags;

.string		target;
.string		targetname;

// damage is accumulated through a frame. and sent as one single
// message, so the super shotgun doesn't generate huge messages
.float		dmg_take;
.float		dmg_save;
.entity		dmg_inflictor;

// who launched a missile
.entity		owner;
// mostly for doors, but also used for waterjump
.vector		movedir;

// trigger messages
.string		message;

// either a cd track number or sound number
.float		sounds;

// contains names of wavs to play
.string		noise, noise1, noise2, noise3;

//================================================
// flag for structure dumping
//================================================
void		end_sys_fields;
